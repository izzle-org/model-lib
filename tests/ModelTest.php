<?php
namespace Izzle\Tests;

use Izzle\Model\Model;
use Izzle\Model\PropertyInfo;
use PHPUnit\Framework\TestCase;

class ModelTest extends TestCase
{
    /**
     * @var Book
     */
    protected $book;
    
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    
        $this->book = new Book([
            'id' => 3,
            'name' => 'Moby Dick',
            'stock_level' => '4'
        ]);
    }
    
    public function testCanBeCreatedWithData(): void
    {
        $this->assertInstanceOf(
            Model::class,
            $this->book
        );
        
        $this->assertEquals($this->book->getName(), 'Moby Dick');
        $this->assertEquals($this->book->getStockLevel(), 4);
    }
    
    public function testCanGetProperties(): void
    {
        $this->assertCount(3, $this->book->properties()->toArray());
    }
    
    public function testCanGetPropertyByName(): void
    {
        $property = $this->book->property('name');
        
        $this->assertNotEmpty($property);
        $this->assertEquals('name', $property->getName());
    }
    
    public function testCanBeConvertedToArray(): void
    {
        $this->assertIsArray(
            $this->book->toArray()
        );
    }
    
    public function testImplementsJson(): void
    {
        $this->assertInstanceOf(
            \JsonSerializable::class,
            $this->book
        );
    }
    
    public function testCanCastValue(): void
    {
        $this->assertEquals(4, $this->book->cast('4', new PropertyInfo('foo', 'int', 0)));
        $this->assertEquals(
            new \DateTime('2019-01-29T07:57:47.664+00:00'),
            $this->book->cast('2019-01-29T07:57:47.664+00:00', new PropertyInfo('createdAt', \DateTime::class, null))
        );
    
        $this->assertEquals(
            new \DateTime('2019-01-29T07:57:47.664+00:00'),
            $this->book->cast(new \DateTime(
                '2019-01-29T07:57:47.664',
                new \DateTimeZone('UTC')
            ), new PropertyInfo('createdAt', \DateTime::class, null))
        );
    }
}
